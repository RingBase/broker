#!/usr/bin/env ruby

require 'eventmachine'
require 'amqp'
require 'yaml'

# Simulate an Invoca AMQP subscriber endpoint
# i.e., listen for events over AMQP and write out to Cassandra
# as necessary

EventMachine.run do
  config = YAML.load_file("../config.yml")
  username = config['rabbitmq']['username']
  password = config['rabbitmq']['password']
  host     = config['rabbitmq']['host']
  port     = config['rabbitmq']['port']
  puts "connecting to amqp://#{username}:#{password}@#{host}:#{port}"

  connection = AMQP.connect("amqp://#{username}:#{password}@#{host}:#{port}")
  ch = AMQP::Channel.new(connection)

  q  = ch.queue("invoca_to_broker", auto_delete: true)
  q.subscribe do |payload|
    puts "Invoca got payload: #{payload}"
    # TODO: write to Cassandra, etc
    connection.close { EventMachine.stop }
  end
end
